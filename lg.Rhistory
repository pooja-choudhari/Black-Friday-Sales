index.data_lg<-sample(1:nrow(data_lg),size=round(0.8*nrow(data_lg)))
train.data_lg<-data_lg[index.data_lg,]
test.data_lg<-data_lg[-index.data_lg,]
model_lg_full<-glm(Purchase~.,data=train.data_lg,family=binomial())
summary(model_lg_full)
model_lg_base<-glm(Purchase~Product_Category_1,data=train.data_lg,family=binomial())
summary(model_lg_base)
model_lg_fwd<-step(model_lg_base,scope=list(upper=model_lg_full,lower=~1),direction="forward",trace=T)
model_lg_bwd<-step(model_lg_full,direction="backward",trace=T)
summary(model_lg_full)
summary(model_lg_base)
summary(model_lg_fwd)
summary(model_lg_bwd)
library(Metrics)
predfull<-predict(model_lg_full,test.data_lg)
head(predict(model_lg_full,test.data_lg,type="prob"))
accuracy(test.data_lg$Purchase,predfull)

predbase<-predict(model_lg_base,test.data_lg)
head(predict(model_lg_base,test.data_lg,type="prob"))
accuracy(test.data_lg$Purchase,predbase)

predfwd<-predict(model_lg_fwd,test.data_lg)
head(predict(model_lg_fwd,test.data_lg,type="prob"))
accuracy(test.data_lg$Purchase,predfwd)

predbwd<-predict(model_lg_bwd,test.data_lg)
head(predict(model_lg_bwd,test.data_lg,type="prob"))
accuracy(test.data_lg$Purchase,predbwd)


fit <-glm(F~x1+x2+x3,data=mydata, family=binomial())summary(fit) # display results
confint(fit) # 95% CI for the coefficients
exp(coef(fit)) # compute exp(coefficients) to analyze change in odds for changes in X
exp(confint(fit)) # 95% CI for exp(coefficients), that is change in odds
predict(fit, type="response") # predicted values
residuals(fit, type="deviance") # residuals
N-fold cross validation ïƒ¨you can still use cv.glm()
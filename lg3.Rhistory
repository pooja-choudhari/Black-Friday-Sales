library(caret)
train<-createDataPartition(data_lg$Purchase,p=0.8,list=FALSE)
training<-data_lg[train,]
testing<-data_lg[-train,]
data_lg[1,]
mod_fit<-train(Purchase~Gendedr+Age+Occupation+City_Category+Stay_In_Current_City_Years+Marital_Status+Product_Category_1+Product_Category_2+Product_Category_3,data=training,method="glm",family="binomial")
mod_fit<-train(Purchase~Gender+Age+Occupation+City_Category+Stay_In_Current_City_Years+Marital_Status+Product_Category_1+Product_Category_2+Product_Category_3,data=training,method="glm",family="binomial")
class(data_lg$Purchase)
data_lg$Purchase<-as.factor(data_lg$Purchase)
class(data_lg$Purchase)
mod_fit<-train(Purchase~Gender+Age+Occupation+City_Category+Stay_In_Current_City_Years+Marital_Status+Product_Category_1+Product_Category_2+Product_Category_3,data=training,method="glm",family="binomial")
mod_fit<-train(as.factor(Purchase)~Gender+Age+Occupation+City_Category+Stay_In_Current_City_Years+Marital_Status+Product_Category_1+Product_Category_2+Product_Category_3,data=training,method="glm",family="binomial")
predict(mod_fit,newdata=testing)
predict(mod_fit,newdata=testing, type="prob")
pred<-predict(mod_fit,newdata=testing)
accuracy(pred,testing$Purchase)
accuracy<-table(pred,testing$Purchase)
sum(diag(accuracy))/sum(accuracy)
confusionMatrix(data=pred,testing$Purchase)
confusionMatrix(data=as.factor(pred),testing$Purchase)
head(pred)
head(testing$Purchase)
confusionMatrix(data=pred,as.factor(testing$Purchase))

mod_fit_glm<-(as.factor(Purchase)~Gender+Age+Occupation+City_Category+Stay_In_Current_City_Years+Marital_Status+Product_Category_1+Product_Category_2+Product_Category_3,data=training,family=binomial())
mod_base_glm<-(as.factor(Purchase)~Gender,data=training,family=binomial())
mod_fwd_glm<-step(mod_base_glm,scope=list(upper=mod_fit_glm,lower=~1),direction="forward",trace=T)
mod_bwd_glm<-step(mod_fit_glm,direction="backward",trace=T)

library(caret)
train<-createDataPartition(data_lg$Purchase,p=0.8,list=FALSE)
training<-data_lg[train,]
testing<-data_lg[-train,]
data_lg[1,]
data_lg$Purchase<-as.factor(data_lg$Purchase)
mod_fit<-train(as.factor(Purchase)~Gender+Age+Occupation+City_Category+Stay_In_Current_City_Years+Marital_Status+Product_Category_1+Product_Category_2+Product_Category_3,data=training,method="glm",family="binomial")
pred<-predict(mod_fit,newdata=testing)
accuracy(pred,testing$Purchase)